{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","state","data","id","message","intervalIsSet","idToDelete","idToUpdate","objectToUpdate","getDataFromDb","fetch","then","json","res","setState","putDataToDB","currentIds","map","idToBeAdded","includes","axios","post","deleteFromDB","idTodelete","parseInt","objIdToDelete","forEach","dat","_id","delete","updateDB","updateToApply","objIdToUpdate","update","this","interval","setInterval","clearInterval","length","style","padding","key","color","type","onChange","e","target","value","placeholder","width","onClick","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.a3bed7a3.chunk.js","sourcesContent":["// /client/App.js\nimport React, { Component } from 'react';\nimport axios from 'axios';\n\nclass App extends Component {\n    // initialize our state\n    state = {\n        data: [],\n        id: 0,\n        message: null,\n        intervalIsSet: false,\n        idToDelete: null,\n        idToUpdate: null,\n        objectToUpdate: null,\n    };\n\n    // when component mounts, first thing it does is fetch all existing data in our db\n    // then we incorporate a polling logic so that we can easily see if our db has\n    // changed and implement those changes into our UI\n    componentDidMount() {\n        this.getDataFromDb();\n        if (!this.state.intervalIsSet) {\n            let interval = setInterval(this.getDataFromDb, 1000);\n            this.setState({ intervalIsSet: interval });\n        }\n    }\n\n    // never let a process live forever\n    // always kill a process everytime we are done using it\n    componentWillUnmount() {\n        if (this.state.intervalIsSet) {\n            clearInterval(this.state.intervalIsSet);\n            this.setState({ intervalIsSet: null });\n        }\n    }\n\n    // just a note, here, in the front end, we use the id key of our data object\n    // in order to identify which we want to Update or delete.\n    // for our back end, we use the object id assigned by MongoDB to modify\n    // data base entries\n\n    // our first get method that uses our backend api to\n    // fetch data from our data base\n    getDataFromDb = () => {\n        fetch('http://localhost:3001/api/getData')\n            .then((data) => data.json())\n            .then((res) => this.setState({ data: res.data }));\n    };\n\n    // our put method that uses our backend api\n    // to create new query into our data base\n    putDataToDB = (message) => {\n        let currentIds = this.state.data.map((data) => data.id);\n        let idToBeAdded = 0;\n        while (currentIds.includes(idToBeAdded)) {\n            ++idToBeAdded;\n        }\n\n        axios.post('http://localhost:3001/api/putData', {\n            id: idToBeAdded,\n            message: message,\n        });\n    };\n\n    // our delete method that uses our backend api\n    // to remove existing database information\n    deleteFromDB = (idTodelete) => {\n        parseInt(idTodelete);\n        let objIdToDelete = null;\n        this.state.data.forEach((dat) => {\n            if (dat.id == idTodelete) {\n                objIdToDelete = dat._id;\n            }\n        });\n\n        axios.delete('http://localhost:3001/api/deleteData', {\n            data: {\n                id: objIdToDelete,\n            },\n        });\n    };\n\n    // our update method that uses our backend api\n    // to overwrite existing data base information\n    updateDB = (idToUpdate, updateToApply) => {\n        let objIdToUpdate = null;\n        parseInt(idToUpdate);\n        this.state.data.forEach((dat) => {\n            if (dat.id == idToUpdate) {\n                objIdToUpdate = dat._id;\n            }\n        });\n\n        axios.post('http://localhost:3001/api/updateData', {\n            id: objIdToUpdate,\n            update: { message: updateToApply },\n        });\n    };\n\n    // here is our UI\n    // it is easy to understand their functions when you\n    // see them render into our screen\n    render() {\n        const { data } = this.state;\n        return (\n            <div>\n                <ul>\n                    {data.length <= 0\n                        ? 'NO DB ENTRIES YET'\n                        : data.map((dat) => (\n                            <li style={{ padding: '10px' }} key={data.message}>\n                                <span style={{ color: 'gray' }}> id: </span> {dat.id} <br />\n                                <span style={{ color: 'gray' }}> data: </span>\n                                {dat.message}\n                            </li>\n                        ))}\n                </ul>\n                <div style={{ padding: '10px' }}>\n                    <input\n                        type=\"text\"\n                        onChange={(e) => this.setState({ message: e.target.value })}\n                        placeholder=\"add something in the database\"\n                        style={{ width: '200px' }}\n                    />\n                    <button onClick={() => this.putDataToDB(this.state.message)}>\n                        ADD\n                    </button>\n                </div>\n                <div style={{ padding: '10px' }}>\n                    <input\n                        type=\"text\"\n                        style={{ width: '200px' }}\n                        onChange={(e) => this.setState({ idToDelete: e.target.value })}\n                        placeholder=\"put id of item to delete here\"\n                    />\n                    <button onClick={() => this.deleteFromDB(this.state.idToDelete)}>\n                        DELETE\n                    </button>\n                </div>\n                <div style={{ padding: '10px' }}>\n                    <input\n                        type=\"text\"\n                        style={{ width: '200px' }}\n                        onChange={(e) => this.setState({ idToUpdate: e.target.value })}\n                        placeholder=\"id of item to update here\"\n                    />\n                    <input\n                        type=\"text\"\n                        style={{ width: '200px' }}\n                        onChange={(e) => this.setState({ updateToApply: e.target.value })}\n                        placeholder=\"put new value of the item here\"\n                    />\n                    <button\n                        onClick={() =>\n                            this.updateDB(this.state.idToUpdate, this.state.updateToApply)\n                        }\n                    >\n                        UPDATE\n                    </button>\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\nserviceWorker.unregister();\n"],"sourceRoot":""}